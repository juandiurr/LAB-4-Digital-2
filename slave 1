/*
 * LAB 4 digital 2 slave 1.c
 *
 * Created: 2/08/2024 10:42:00
 * Author : diego
 */ 
#define SlaveAddress 0x30
#define F_CPU 16000000UL
#include <avr/io.h>
#include <stdint.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include "Librerias/I2CS.h"
#include "Librerias/ADC.h"

volatile uint8_t buffer1 = 0;//variable de recepción de datos
volatile uint8_t buffer2 = 0;//variable de transmición de datos
int main(void)
{
	cli();
	ADC_(128);
	ADC0();
	I2C_slave_init(SlaveAddress);
	sei();
    /* Replace with your application code */
    while (1) 
    {
		ADCSRA |= (1<<ADSC);//HABILITAR CONVERSION
		_delay_ms(500);
    }
}

ISR(TWI_vect) {
	uint8_t estado = TWSR & 0xF8; // Lee los 3 bits superiores del registro de estado

	switch (estado) {
		/*case 0x60: // SLA+W recibido, ACK enviado
		case 0x70: // SLA+W recibido en modo general, ACK enviado
		TWCR |= (1 << TWINT); // Borra el flag TWINT para continuar
		break;

		case 0x80: // Datos recibidos, ACK enviado
		case 0x90: // Datos recibidos en llamada general, ACK enviado
		dato = TWDR; // Lee el dato recibido del registro de datos
		TWCR |= (1 << TWINT); // Borra el flag TWINT para continuar
		break;*/

		case 0xA8: // SLA+R recibido, ACK enviado
		case 0xB8: // Dato transmitido y ACK recibido
		TWDR = buffer2; // Carga el valor del ADC en el registro de datos
		TWCR |= (1 << TWINT) | (1 << TWEA); // Borra el flag TWINT y habilita ACK para el próximo byte
		break;

		case 0xC0: // Dato transmitido y NACK recibido
		case 0xC8: // Último dato transmitido y ACK recibido
		TWCR |= (1 << TWINT) | (1 << TWEA); // Borra el flag TWINT y habilita ACK para el próximo byte
		break;
		
		default: // Manejo de errores
		TWCR |= (1 << TWINT) | (1 << TWSTO); // Borra el flag TWINT y envía una condición de STOP
		break;
	}
}
ISR(ADC_vect){
	buffer2 = ADCH;
	ADCSRA |= (1<<ADIF); //apagar bandera
}
