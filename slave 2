/*
 * LAB4 digital 2 slave 2.c
 *
 * Created: 2/08/2024 11:31:43
 * Author : diego
 */ 

#define SlaveAddress 0x40
#define F_CPU 16000000UL
#include <avr/io.h>
#include <stdint.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include "Librerias/I2CS.h"
volatile uint8_t buffer = 0;//variable de datos
int main(void)
{
	cli();
	I2C_slave_init(SlaveAddress);
	DDRC &= ~((1<<DDC0) | (1<<DDC1));//BOTONES
	PORTC |= (1<<PORTC0) | (1<<PORTC1);
	DDRD |= (1<<DDD2) | (1<<DDD3) | (1<<DDD4) | (1<<DDD5);//LEDS
	PORTD &= ~((1<<PORTD2) | (1<<PORTD3) | (1<<PORTD4) | (1<<PORTD5));
	PCICR |= (1<<PCIE1); //habilitar interrupcion en el pcint0:7
	PCMSK1 |= (1<<PCINT8) | (1<<PCINT9); //int botones de posiciones
	sei();
	/* Replace with your application code */
	while (1)
	{
		PORTD = (buffer<<2);
		_delay_ms(500);
	}
}

ISR(TWI_vect) {
	uint8_t estado = TWSR & 0xF8; // Lee los 3 bits superiores del registro de estado

	switch (estado) {
		/*case 0x60: // SLA+W recibido, ACK enviado
		case 0x70: // SLA+W recibido en modo general, ACK enviado
		TWCR |= (1 << TWINT); // Borra el flag TWINT para continuar
		break;

		case 0x80: // Datos recibidos, ACK enviado
		case 0x90: // Datos recibidos en llamada general, ACK enviado
		dato = TWDR; // Lee el dato recibido del registro de datos
		TWCR |= (1 << TWINT); // Borra el flag TWINT para continuar
		break;*/

		case 0xA8: // SLA+R recibido, ACK enviado
		case 0xB8: // Dato transmitido y ACK recibido
		TWDR = buffer; // Carga el valor del ADC en el registro de datos
		TWCR |= (1 << TWINT) | (1 << TWEA); // Borra el flag TWINT y habilita ACK para el próximo byte
		break;

		case 0xC0: // Dato transmitido y NACK recibido
		case 0xC8: // Último dato transmitido y ACK recibido
		TWCR |= (1 << TWINT) | (1 << TWEA); // Borra el flag TWINT y habilita ACK para el próximo byte
		break;
		
		default: // Manejo de errores
		TWCR |= (1 << TWINT) | (1 << TWSTO); // Borra el flag TWINT y envía una condición de STOP
		break;
	}
}

ISR(PCINT1_vect){
	if (!(PINC & (1<<PINC0))){
		if (buffer < 15){
			buffer++;
		}
		
	}else if(!(PINC & (1<<PINC1))){
		if (buffer > 0){
			buffer--;
		}
		
		
	}
	
}
